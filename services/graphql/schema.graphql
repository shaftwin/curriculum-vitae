scalar Date

"""
Basic required datas
"""
interface RequireDatas {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
}

"""
Common User infos
Missing Job
"""
interface UserInfo {
  username: String!
  email: String!
  password: String!
  phoneNumber: String!
  picture: String!
  enabled: Boolean!
}

"""
User type
What is enabled used for ?
Rename User into PendingUser ?
"""
type User implements RequireDatas & UserInfo {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  username: String!
  email: String!
  password: String!
  phoneNumber: String!
  picture: String!
  enabled: Boolean!
}

"""
User with team
Team is equal to Team and Partner ? Partner should be required
Rename VerifiedUser into User ?
"""
type VerifiedUser implements RequireDatas & UserInfo {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  username: String!
  email: String!
  password: String!
  phoneNumber: String!
  picture: String!
  enabled: Boolean!
  teams: [Team]
}

"""
Team type
"""
type Team implements RequireDatas {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  # partner: Partner!
  profile: UserProfile!
  joinedAt: Date!
}

"""
UserProfile type
"""
type UserProfile implements RequireDatas {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  permissions: [ProfilePermission!]
}

"""
ProfilePermission type
"""
type ProfilePermission implements RequireDatas {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  name: String!
}

"""
Queries list
"""
type Query {
  getMe: UserResponse!
  getUserById(id: ID!): UserResponse!
  getUsers: [User!]!
  getTeamById(id: ID!): TeamResponse
  getTeams: [Team!]!
  getUserProfileById(id: ID!): UserProfileResponse
  getUserProfiles: [UserProfile!]!
  getProfilePermissionById(id: ID!): ProfilePermissionResponse
  getProfilePermissions: [ProfilePermission!]!
  getVerifiedUserById(id: ID!): VerifiedUserResponse
  getVerifiedUsers: [VerifiedUser!]!
}

"""
Team response
"""
type TeamResponse {
  team: Team
  errors: [ErrorResponse!]
}

"""
UserProfile response
"""
type UserProfileResponse {
  userProfile: UserProfile
  errors: [ErrorResponse!]
}

"""
ProfilePermission response
"""
type ProfilePermissionResponse {
  profilePermission: ProfilePermission
  errors: [ErrorResponse!]
}

"""
ProfilePermission response
"""
type VerifiedUserResponse {
  verifiedUser: VerifiedUser
  errors: [ErrorResponse!]
}

"""
Mutation list
"""
type Mutation {
  login(input: LoginInput!): LoginResponse!
  createPendingUser(input: PendingUserInput!): PendingUserResponse!
  createUser(input: UserInput!): UserResponse!
  requestPasswordReset(email: String!): String!
  confirmPasswordResetByToken(resetToken: String!): ConfirmPasswordResetByTokenResponse!
  resetUserPassword(input: ResetUserPasswordInput!): ResetUserPasswordResponse!
}

"""
Login mutation input
"""
input LoginInput {
  password: String!
  email: String!
}

"""
Login mutation response
"""
type LoginResponse {
  token: String
  user: User
  errors: [ErrorResponse!]
}
 
"""
Create Pending User mutation input
"""
input PendingUserInput {
  username: String!
  email: String!
  job: String!
  # partner: Partner!
}

"""
Create Pending User mutation response
"""
type PendingUserResponse {
  partnerName: String
  # partner: Partner
  errors: [ErrorResponse!]
}

"""
Create User mutation input
"""
input UserInput {
  username: String!
  password: String!
  email: String!
  job: String!
  # partner: Partner!
}

"""
Create User mutation response
"""
type UserResponse {
  user: User
  errors: [ErrorResponse!]
}

"""
Confirm Password Reset By Token mutation response
"""
type ConfirmPasswordResetByTokenResponse {
  message: String
  resetToken: String
  errors: [ErrorResponse!]
}

"""
Reset User Password Input mutation input
"""
input ResetUserPasswordInput {
  newPassword: String!
  resetToken: String!
}

"""
Reset User Password Input mutation response
"""
type ResetUserPasswordResponse {
  message: String
  errors: [ErrorResponse!]
}

"""
Error Response
"""
type ErrorResponse {
  message: String!
  path: String!
}
